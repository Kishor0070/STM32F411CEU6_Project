// #include "STM32F411CEU6_PERIPHERAL.h"
#include "stm32f411xe.h"
#include "app_header.h"
#include "usart_lib.h"

#define OP_C				16000000U

int main(void){
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;

	GPIOC->MODER |= (0x01<<26);
	GPIOC->MODER &= ~(0x01<<27);


	RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN);


	GPIOB->MODER |= GPIO_MODER_MODE7;
	GPIOB->MODER &= ~(GPIO_MODER_MODE7_0);

	GPIOB->AFR[0] |= GPIO_AFRL_AFRL7;
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFRL7_3);

	GPIOA->MODER |= GPIO_MODER_MODE2;
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_0);

	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2;
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2_3);

	usartx_init(USART1);
	setBaudRate(USART1, 9600U, OP_C);

	usartx_init(USART2);
	setBaudRate(USART2, 9600U, OP_C);

	// Test subject


	NVIC_EnableIRQ(USART1_IRQn);
	NVIC_EnableIRQ(USART2_IRQn);


	char txData[2];
	txData[0] = 'A';
	txData[1] = 'B';

	while(1){
		for(uint16_t i=0; i< 10000; i++){

		}

		transmit_frame(USART2, txData, 2);
		GPIOC->ODR &= ~(0x01<<13);
		if(usart1_buf.rxBuffer[0] == 'A' && usart1_buf.rxBuffer[1] == 'B'){
			GPIOC->ODR |= (0x01<<13);
		}
	}
}

