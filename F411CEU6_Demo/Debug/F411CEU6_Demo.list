
F411CEU6_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009c8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b60  08000b60  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b60  08000b60  00002020  2**0
                  CONTENTS
  4 .ARM          00000000  08000b60  08000b60  00002020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b60  08000b60  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b60  08000b60  00001b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b64  08000b64  00001b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08000b68  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000020  08000b88  00002020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08000b88  00002124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001212  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c4  00000000  00000000  00003262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  00003928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f7  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e272  00000000  00000000  00003b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022e2  00000000  00000000  00011df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053316  00000000  00000000  000140db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000673f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003d0  00000000  00000000  00067434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00067804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000b48 	.word	0x08000b48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08000b48 	.word	0x08000b48

080001d8 <systick_init>:
// By default SysTick is enabled for 10 milliseconds interrupt
volatile uint8_t timingCounter;
volatile bool task50msFlag;
volatile bool task100msFlag;

void systick_init(){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	volatile uint32_t reloadValue = ((SYS_CLOCK/100)) - 1;
 80001de:	4b10      	ldr	r3, [pc, #64]	@ (8000220 <systick_init+0x48>)
 80001e0:	607b      	str	r3, [r7, #4]
	SysTick->CTRL = 0;
 80001e2:	4b10      	ldr	r3, [pc, #64]	@ (8000224 <systick_init+0x4c>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = reloadValue;
 80001e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000224 <systick_init+0x4c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	6053      	str	r3, [r2, #4]

	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80001ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <systick_init+0x4c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000224 <systick_init+0x4c>)
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <systick_init+0x4c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a09      	ldr	r2, [pc, #36]	@ (8000224 <systick_init+0x4c>)
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000206:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <systick_init+0x4c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a06      	ldr	r2, [pc, #24]	@ (8000224 <systick_init+0x4c>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6013      	str	r3, [r2, #0]

}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	000270ff 	.word	0x000270ff
 8000224:	e000e010 	.word	0xe000e010

08000228 <SysTick_Handler>:

void SysTick_Handler(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

	// Cycling counter for 2 seconds
	timingCounter++;
 800022c:	4b24      	ldr	r3, [pc, #144]	@ (80002c0 <SysTick_Handler+0x98>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	3301      	adds	r3, #1
 8000234:	b2da      	uxtb	r2, r3
 8000236:	4b22      	ldr	r3, [pc, #136]	@ (80002c0 <SysTick_Handler+0x98>)
 8000238:	701a      	strb	r2, [r3, #0]
	if(timingCounter > 200){
 800023a:	4b21      	ldr	r3, [pc, #132]	@ (80002c0 <SysTick_Handler+0x98>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	b2db      	uxtb	r3, r3
 8000240:	2bc8      	cmp	r3, #200	@ 0xc8
 8000242:	d902      	bls.n	800024a <SysTick_Handler+0x22>
		timingCounter = 1;
 8000244:	4b1e      	ldr	r3, [pc, #120]	@ (80002c0 <SysTick_Handler+0x98>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
	}

	if((timingCounter%5) == 0){
 800024a:	4b1d      	ldr	r3, [pc, #116]	@ (80002c0 <SysTick_Handler+0x98>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b2da      	uxtb	r2, r3
 8000250:	4b1c      	ldr	r3, [pc, #112]	@ (80002c4 <SysTick_Handler+0x9c>)
 8000252:	fba3 1302 	umull	r1, r3, r3, r2
 8000256:	0899      	lsrs	r1, r3, #2
 8000258:	460b      	mov	r3, r1
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	440b      	add	r3, r1
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	b2db      	uxtb	r3, r3
 8000262:	2b00      	cmp	r3, #0
 8000264:	d103      	bne.n	800026e <SysTick_Handler+0x46>
		task50msFlag = true;
 8000266:	4b18      	ldr	r3, [pc, #96]	@ (80002c8 <SysTick_Handler+0xa0>)
 8000268:	2201      	movs	r2, #1
 800026a:	701a      	strb	r2, [r3, #0]
 800026c:	e002      	b.n	8000274 <SysTick_Handler+0x4c>
	}
	else{
		task50msFlag = false;
 800026e:	4b16      	ldr	r3, [pc, #88]	@ (80002c8 <SysTick_Handler+0xa0>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
	}
	if((timingCounter%10) == 0){
 8000274:	4b12      	ldr	r3, [pc, #72]	@ (80002c0 <SysTick_Handler+0x98>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <SysTick_Handler+0x9c>)
 800027c:	fba3 1302 	umull	r1, r3, r3, r2
 8000280:	08d9      	lsrs	r1, r3, #3
 8000282:	460b      	mov	r3, r1
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	440b      	add	r3, r1
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	1ad3      	subs	r3, r2, r3
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d103      	bne.n	800029a <SysTick_Handler+0x72>
		task100msFlag = true;
 8000292:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <SysTick_Handler+0xa4>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	e002      	b.n	80002a0 <SysTick_Handler+0x78>
	}else{
		task100msFlag = false;
 800029a:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <SysTick_Handler+0xa4>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
	}

	// Call the dedicated tasks here..
	if(task50msFlag){
 80002a0:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <SysTick_Handler+0xa0>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SysTick_Handler+0x86>
		task_50ms();
 80002aa:	f000 f811 	bl	80002d0 <task_50ms>
	}
	if(task100msFlag){
 80002ae:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <SysTick_Handler+0xa4>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SysTick_Handler+0x94>
		task_100ms();
 80002b8:	f000 f810 	bl	80002dc <task_100ms>
	}
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	2000003c 	.word	0x2000003c
 80002c4:	cccccccd 	.word	0xcccccccd
 80002c8:	2000003d 	.word	0x2000003d
 80002cc:	2000003e 	.word	0x2000003e

080002d0 <task_50ms>:

void task_50ms(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	utility();
 80002d4:	f000 f960 	bl	8000598 <utility>
	//blinkLed500ms();
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}

080002dc <task_100ms>:
void task_100ms(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	utility_t100();
 80002e0:	f000 f942 	bl	8000568 <utility_t100>
	transmit_over_usart2();
 80002e4:	f000 f908 	bl	80004f8 <transmit_over_usart2>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	db0b      	blt.n	8000316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	f003 021f 	and.w	r2, r3, #31
 8000304:	4907      	ldr	r1, [pc, #28]	@ (8000324 <__NVIC_EnableIRQ+0x38>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	095b      	lsrs	r3, r3, #5
 800030c:	2001      	movs	r0, #1
 800030e:	fa00 f202 	lsl.w	r2, r0, r2
 8000312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000e100 	.word	0xe000e100

08000328 <main>:
bool isPasswordCorrect(void);

char password[10] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
volatile char *data = NULL;

int main(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0

	// For testing purpose only
	volatile char *temp = NULL;
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]

	application_init();
 8000332:	f000 f861 	bl	80003f8 <application_init>


	while(1){
		// Continuously check for the data received on USART6 peripheral
		temp = getData();
 8000336:	f000 f90b 	bl	8000550 <getData>
 800033a:	6078      	str	r0, [r7, #4]
		if(temp != NULL){
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d002      	beq.n	8000348 <main+0x20>
			data = temp;
 8000342:	4a0b      	ldr	r2, [pc, #44]	@ (8000370 <main+0x48>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6013      	str	r3, [r2, #0]
		}
		if(isPasswordCorrect()){
 8000348:	f000 f816 	bl	8000378 <isPasswordCorrect>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d006      	beq.n	8000360 <main+0x38>
			GPIOC->ODR &= ~(0x01<<13);
 8000352:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <main+0x4c>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a07      	ldr	r2, [pc, #28]	@ (8000374 <main+0x4c>)
 8000358:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	e7ea      	b.n	8000336 <main+0xe>
		}else{
			GPIOC->ODR |= (0x01<<13);
 8000360:	4b04      	ldr	r3, [pc, #16]	@ (8000374 <main+0x4c>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	4a03      	ldr	r2, [pc, #12]	@ (8000374 <main+0x4c>)
 8000366:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800036a:	6153      	str	r3, [r2, #20]
		temp = getData();
 800036c:	e7e3      	b.n	8000336 <main+0xe>
 800036e:	bf00      	nop
 8000370:	20000040 	.word	0x20000040
 8000374:	40020800 	.word	0x40020800

08000378 <isPasswordCorrect>:
		}

	}
}

bool isPasswordCorrect(void){
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
	volatile uint8_t index = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	71fb      	strb	r3, [r7, #7]

	if(data == NULL){
 8000382:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <isPasswordCorrect+0x74>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d11f      	bne.n	80003ca <isPasswordCorrect+0x52>
		return false;
 800038a:	2300      	movs	r3, #0
 800038c:	e028      	b.n	80003e0 <isPasswordCorrect+0x68>
	}
	while(index < USART_BUFFERSIZE && index < 10){
		if(data[index] == '\0' || data[index] != password[index]){
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <isPasswordCorrect+0x74>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	79fa      	ldrb	r2, [r7, #7]
 8000394:	b2d2      	uxtb	r2, r2
 8000396:	4413      	add	r3, r2
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2b00      	cmp	r3, #0
 800039e:	d00d      	beq.n	80003bc <isPasswordCorrect+0x44>
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <isPasswordCorrect+0x74>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	79fa      	ldrb	r2, [r7, #7]
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	4413      	add	r3, r2
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	4619      	mov	r1, r3
 80003b4:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <isPasswordCorrect+0x78>)
 80003b6:	5c5b      	ldrb	r3, [r3, r1]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d001      	beq.n	80003c0 <isPasswordCorrect+0x48>
			return false;
 80003bc:	2300      	movs	r3, #0
 80003be:	e00f      	b.n	80003e0 <isPasswordCorrect+0x68>
		}
		index++;
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	3301      	adds	r3, #1
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	71fb      	strb	r3, [r7, #7]
	while(index < USART_BUFFERSIZE && index < 10){
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <isPasswordCorrect+0x7c>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d203      	bcs.n	80003de <isPasswordCorrect+0x66>
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b09      	cmp	r3, #9
 80003dc:	d9d7      	bls.n	800038e <isPasswordCorrect+0x16>
	}

	return true;
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	20000040 	.word	0x20000040
 80003f0:	20000000 	.word	0x20000000
 80003f4:	2000001d 	.word	0x2000001d

080003f8 <application_init>:


void application_init(void){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	// Provide clock access to the used peripherals
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80003fc:	4b37      	ldr	r3, [pc, #220]	@ (80004dc <application_init+0xe4>)
 80003fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000400:	4a36      	ldr	r2, [pc, #216]	@ (80004dc <application_init+0xe4>)
 8000402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000406:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000408:	4b34      	ldr	r3, [pc, #208]	@ (80004dc <application_init+0xe4>)
 800040a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800040c:	4a33      	ldr	r2, [pc, #204]	@ (80004dc <application_init+0xe4>)
 800040e:	f043 0310 	orr.w	r3, r3, #16
 8000412:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN);
 8000414:	4b31      	ldr	r3, [pc, #196]	@ (80004dc <application_init+0xe4>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000418:	4a30      	ldr	r2, [pc, #192]	@ (80004dc <application_init+0xe4>)
 800041a:	f043 0307 	orr.w	r3, r3, #7
 800041e:	6313      	str	r3, [r2, #48]	@ 0x30

	// Configure PA2 for transmitting over USART2 peripheral
	GPIOA->MODER |= GPIO_MODER_MODE2_Msk;
 8000420:	4b2f      	ldr	r3, [pc, #188]	@ (80004e0 <application_init+0xe8>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a2e      	ldr	r2, [pc, #184]	@ (80004e0 <application_init+0xe8>)
 8000426:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800042a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_0);
 800042c:	4b2c      	ldr	r3, [pc, #176]	@ (80004e0 <application_init+0xe8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a2b      	ldr	r2, [pc, #172]	@ (80004e0 <application_init+0xe8>)
 8000432:	f023 0310 	bic.w	r3, r3, #16
 8000436:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (GPIO_AFRL_AFRL2);
 8000438:	4b29      	ldr	r3, [pc, #164]	@ (80004e0 <application_init+0xe8>)
 800043a:	6a1b      	ldr	r3, [r3, #32]
 800043c:	4a28      	ldr	r2, [pc, #160]	@ (80004e0 <application_init+0xe8>)
 800043e:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000442:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2_3);
 8000444:	4b26      	ldr	r3, [pc, #152]	@ (80004e0 <application_init+0xe8>)
 8000446:	6a1b      	ldr	r3, [r3, #32]
 8000448:	4a25      	ldr	r2, [pc, #148]	@ (80004e0 <application_init+0xe8>)
 800044a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800044e:	6213      	str	r3, [r2, #32]

	// configure USART2 for the PA2
	usartx_init(USART2);
 8000450:	4824      	ldr	r0, [pc, #144]	@ (80004e4 <application_init+0xec>)
 8000452:	f000 f8df 	bl	8000614 <usartx_init>
	setBaudRate(USART2, 9600U, OP_FREQ);
 8000456:	4a24      	ldr	r2, [pc, #144]	@ (80004e8 <application_init+0xf0>)
 8000458:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 800045c:	4821      	ldr	r0, [pc, #132]	@ (80004e4 <application_init+0xec>)
 800045e:	f000 f906 	bl	800066e <setBaudRate>

	// Configure PB7 for receiving over USART1 peripheral
	GPIOB->MODER |= GPIO_MODER_MODE7_Msk;
 8000462:	4b22      	ldr	r3, [pc, #136]	@ (80004ec <application_init+0xf4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a21      	ldr	r2, [pc, #132]	@ (80004ec <application_init+0xf4>)
 8000468:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800046c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODE7_0);
 800046e:	4b1f      	ldr	r3, [pc, #124]	@ (80004ec <application_init+0xf4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a1e      	ldr	r2, [pc, #120]	@ (80004ec <application_init+0xf4>)
 8000474:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000478:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] |= GPIO_AFRL_AFRL7;
 800047a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <application_init+0xf4>)
 800047c:	6a1b      	ldr	r3, [r3, #32]
 800047e:	4a1b      	ldr	r2, [pc, #108]	@ (80004ec <application_init+0xf4>)
 8000480:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000484:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFRL7_3);
 8000486:	4b19      	ldr	r3, [pc, #100]	@ (80004ec <application_init+0xf4>)
 8000488:	6a1b      	ldr	r3, [r3, #32]
 800048a:	4a18      	ldr	r2, [pc, #96]	@ (80004ec <application_init+0xf4>)
 800048c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000490:	6213      	str	r3, [r2, #32]

	usartx_init(USART1);
 8000492:	4817      	ldr	r0, [pc, #92]	@ (80004f0 <application_init+0xf8>)
 8000494:	f000 f8be 	bl	8000614 <usartx_init>
	setBaudRate(USART1, 9600U, OP_FREQ);
 8000498:	4a13      	ldr	r2, [pc, #76]	@ (80004e8 <application_init+0xf0>)
 800049a:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 800049e:	4814      	ldr	r0, [pc, #80]	@ (80004f0 <application_init+0xf8>)
 80004a0:	f000 f8e5 	bl	800066e <setBaudRate>
	// Configure PC13 for output mode to turn on / off led on the board.

	GPIOC->MODER |= GPIO_MODER_MODE13;
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <application_init+0xfc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <application_init+0xfc>)
 80004aa:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 80004ae:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODE13_1);
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <application_init+0xfc>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0f      	ldr	r2, [pc, #60]	@ (80004f4 <application_init+0xfc>)
 80004b6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80004ba:	6013      	str	r3, [r2, #0]

	// Enable interrupts for the USART peripherals
	NVIC_EnableIRQ(USART1_IRQn);
 80004bc:	2025      	movs	r0, #37	@ 0x25
 80004be:	f7ff ff15 	bl	80002ec <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(USART2_IRQn);
 80004c2:	2026      	movs	r0, #38	@ 0x26
 80004c4:	f7ff ff12 	bl	80002ec <__NVIC_EnableIRQ>

	USART1->CR1	|= USART_CR1_RXNEIE;
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <application_init+0xf8>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a08      	ldr	r2, [pc, #32]	@ (80004f0 <application_init+0xf8>)
 80004ce:	f043 0320 	orr.w	r3, r3, #32
 80004d2:	60d3      	str	r3, [r2, #12]

	systick_init();
 80004d4:	f7ff fe80 	bl	80001d8 <systick_init>

}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020000 	.word	0x40020000
 80004e4:	40004400 	.word	0x40004400
 80004e8:	00f42400 	.word	0x00f42400
 80004ec:	40020400 	.word	0x40020400
 80004f0:	40011000 	.word	0x40011000
 80004f4:	40020800 	.word	0x40020800

080004f8 <transmit_over_usart2>:
char txData[10] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
char txData2[5] = {'K', 'L', 'M', 'N', 'O'};

volatile char *usartData = NULL;

void transmit_over_usart2(void){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	if(task100Counter == 5){
 80004fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <transmit_over_usart2+0x40>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b05      	cmp	r3, #5
 8000504:	d105      	bne.n	8000512 <transmit_over_usart2+0x1a>
		transmit_frame(USART2, txData, 10);
 8000506:	220a      	movs	r2, #10
 8000508:	490c      	ldr	r1, [pc, #48]	@ (800053c <transmit_over_usart2+0x44>)
 800050a:	480d      	ldr	r0, [pc, #52]	@ (8000540 <transmit_over_usart2+0x48>)
 800050c:	f000 f8c2 	bl	8000694 <transmit_frame>
 8000510:	e009      	b.n	8000526 <transmit_over_usart2+0x2e>
	}else if(task100Counter == 9){
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <transmit_over_usart2+0x40>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b2db      	uxtb	r3, r3
 8000518:	2b09      	cmp	r3, #9
 800051a:	d104      	bne.n	8000526 <transmit_over_usart2+0x2e>
		transmit_frame(USART2, txData2, 5);
 800051c:	2205      	movs	r2, #5
 800051e:	4909      	ldr	r1, [pc, #36]	@ (8000544 <transmit_over_usart2+0x4c>)
 8000520:	4807      	ldr	r0, [pc, #28]	@ (8000540 <transmit_over_usart2+0x48>)
 8000522:	f000 f8b7 	bl	8000694 <transmit_frame>
	}
	usartData = read_data_usart(USART1);
 8000526:	4808      	ldr	r0, [pc, #32]	@ (8000548 <transmit_over_usart2+0x50>)
 8000528:	f000 f9d6 	bl	80008d8 <read_data_usart>
 800052c:	4603      	mov	r3, r0
 800052e:	4a07      	ldr	r2, [pc, #28]	@ (800054c <transmit_over_usart2+0x54>)
 8000530:	6013      	str	r3, [r2, #0]
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000000a 	.word	0x2000000a
 800053c:	2000000c 	.word	0x2000000c
 8000540:	40004400 	.word	0x40004400
 8000544:	20000018 	.word	0x20000018
 8000548:	40011000 	.word	0x40011000
 800054c:	20000044 	.word	0x20000044

08000550 <getData>:

volatile char* getData(void){
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	return usartData;
 8000554:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <getData+0x14>)
 8000556:	681b      	ldr	r3, [r3, #0]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000044 	.word	0x20000044

08000568 <utility_t100>:
void utility_t100(void){
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	task100Counter++;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <utility_t100+0x2c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	3301      	adds	r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <utility_t100+0x2c>)
 8000578:	701a      	strb	r2, [r3, #0]
	if(task100Counter > 10){
 800057a:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <utility_t100+0x2c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b0a      	cmp	r3, #10
 8000582:	d902      	bls.n	800058a <utility_t100+0x22>
		task100Counter = 1;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <utility_t100+0x2c>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
	}

}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	2000000a 	.word	0x2000000a

08000598 <utility>:
	}else{
		GPIOC->ODR |= (GPIO_ODR_OD13);
	}
}

void utility(void){
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	task50Counter++; // Goes till 1 second and configurable
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <utility+0x70>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	3301      	adds	r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <utility+0x70>)
 80005a8:	701a      	strb	r2, [r3, #0]


	if(task50Counter>20){
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <utility+0x70>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b14      	cmp	r3, #20
 80005b2:	d902      	bls.n	80005ba <utility+0x22>
		task50Counter = 1;
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <utility+0x70>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
	}

	if(task50Counter <= 10){
 80005ba:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <utility+0x70>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b0a      	cmp	r3, #10
 80005c2:	d803      	bhi.n	80005cc <utility+0x34>
		blink500ms = true;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <utility+0x74>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e002      	b.n	80005d2 <utility+0x3a>
	}else{
		blink500ms = false;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <utility+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	}
	if(task50Counter == 20){
 80005d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <utility+0x70>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b14      	cmp	r3, #20
 80005da:	d10f      	bne.n	80005fc <utility+0x64>
		blink1000ms = !blink1000ms;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <utility+0x78>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	bf14      	ite	ne
 80005e6:	2301      	movne	r3, #1
 80005e8:	2300      	moveq	r3, #0
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <utility+0x78>)
 80005fa:	701a      	strb	r2, [r3, #0]
	}

}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000048 	.word	0x20000048
 800060c:	20000049 	.word	0x20000049
 8000610:	2000004a 	.word	0x2000004a

08000614 <usartx_init>:
char usart6_recData[21];
bool firstTimeFlag = true;

// It will initialize the dedicated peripheral depending on the passed USART peripheral from USART1 USART2 and USART6

void usartx_init(USART_TypeDef *usart){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	usart->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	f043 020c 	orr.w	r2, r3, #12
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	60da      	str	r2, [r3, #12]
	usart->CR1 |= USART_CR1_UE;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	60da      	str	r2, [r3, #12]
	reset_transmit_buffer(usart);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f919 	bl	800086c <reset_transmit_buffer>
	reset_receive_buffer(usart);
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f9e4 	bl	8000a08 <reset_receive_buffer>

}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <setDiv>:


// It will set the baud rate for the communication
uint16_t setDiv(uint32_t pCLK, uint32_t baud){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	return (uint16_t)((pCLK+(baud/2U))/baud);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	085a      	lsrs	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	441a      	add	r2, r3
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000660:	b29b      	uxth	r3, r3
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <setBaudRate>:
void setBaudRate(USART_TypeDef *usart, uint32_t baud, uint32_t pClk){
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
	usart->BRR = setDiv(pClk, baud);
 800067a:	68b9      	ldr	r1, [r7, #8]
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ffe3 	bl	8000648 <setDiv>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	609a      	str	r2, [r3, #8]
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <transmit_frame>:



bool transmit_frame(USART_TypeDef *usart, char *frame, uint8_t frameLength){
 8000694:	b480      	push	{r7}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	if(frameLength > USART_BUFFERSIZE){
 80006a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <transmit_frame+0xbc>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d901      	bls.n	80006b0 <transmit_frame+0x1c>
		return false;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e048      	b.n	8000742 <transmit_frame+0xae>
	}
	volatile USART_BUFFER *buffer = NULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
	if(usart == USART1){
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <transmit_frame+0xc0>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d102      	bne.n	80006c2 <transmit_frame+0x2e>
		buffer = &usart1_buf;
 80006bc:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <transmit_frame+0xc4>)
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e00f      	b.n	80006e2 <transmit_frame+0x4e>
	}else if(usart == USART2){
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4a25      	ldr	r2, [pc, #148]	@ (800075c <transmit_frame+0xc8>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d102      	bne.n	80006d0 <transmit_frame+0x3c>
		buffer = &usart2_buf;
 80006ca:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <transmit_frame+0xcc>)
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	e008      	b.n	80006e2 <transmit_frame+0x4e>
	}else if(usart == USART6){
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a24      	ldr	r2, [pc, #144]	@ (8000764 <transmit_frame+0xd0>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d102      	bne.n	80006de <transmit_frame+0x4a>
		buffer = &usart6_buf;
 80006d8:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <transmit_frame+0xd4>)
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	e001      	b.n	80006e2 <transmit_frame+0x4e>
	}else{
		return false;
 80006de:	2300      	movs	r3, #0
 80006e0:	e02f      	b.n	8000742 <transmit_frame+0xae>
	}

	// Check if already buffer is occupied by some other transmission
	if(!buffer->isReadyToTransmit){
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f083 0301 	eor.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <transmit_frame+0x62>
		return false;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e025      	b.n	8000742 <transmit_frame+0xae>
	}

	volatile uint8_t index = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	74fb      	strb	r3, [r7, #19]
	buffer->occupiedSize = frameLength;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	79fa      	ldrb	r2, [r7, #7]
 80006fe:	705a      	strb	r2, [r3, #1]
	buffer->txIndex = 0;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	2200      	movs	r2, #0
 8000704:	709a      	strb	r2, [r3, #2]

	while(frameLength > 0){
 8000706:	e012      	b.n	800072e <transmit_frame+0x9a>
		buffer->txBuffer[index] = *frame;
 8000708:	7cfb      	ldrb	r3, [r7, #19]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4619      	mov	r1, r3
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	440b      	add	r3, r1
 8000716:	715a      	strb	r2, [r3, #5]
		frame++;
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	3301      	adds	r3, #1
 800071c:	60bb      	str	r3, [r7, #8]
		index++;
 800071e:	7cfb      	ldrb	r3, [r7, #19]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	3301      	adds	r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	74fb      	strb	r3, [r7, #19]
		frameLength--;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3b01      	subs	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
	while(frameLength > 0){
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1e9      	bne.n	8000708 <transmit_frame+0x74>
	}

	// Finally enabling Transmission interrupt
	usart->CR1 |= USART_CR1_TXEIE;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	60da      	str	r2, [r3, #12]

	return true;
 8000740:	2301      	movs	r3, #1
}
 8000742:	4618      	mov	r0, r3
 8000744:	371c      	adds	r7, #28
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	2000001d 	.word	0x2000001d
 8000754:	40011000 	.word	0x40011000
 8000758:	2000004c 	.word	0x2000004c
 800075c:	40004400 	.word	0x40004400
 8000760:	2000007c 	.word	0x2000007c
 8000764:	40011400 	.word	0x40011400
 8000768:	200000ac 	.word	0x200000ac

0800076c <usart_interrupt_commonHandler>:


// Interrupt Handler

void usart_interrupt_commonHandler(USART_TypeDef *usart){
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	volatile USART_BUFFER *buffer = NULL;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
	if(usart == USART1){
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a34      	ldr	r2, [pc, #208]	@ (800084c <usart_interrupt_commonHandler+0xe0>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d102      	bne.n	8000786 <usart_interrupt_commonHandler+0x1a>
		buffer = &usart1_buf;
 8000780:	4b33      	ldr	r3, [pc, #204]	@ (8000850 <usart_interrupt_commonHandler+0xe4>)
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	e00c      	b.n	80007a0 <usart_interrupt_commonHandler+0x34>
	}else if(usart == USART2){
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a32      	ldr	r2, [pc, #200]	@ (8000854 <usart_interrupt_commonHandler+0xe8>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d102      	bne.n	8000794 <usart_interrupt_commonHandler+0x28>
		buffer = &usart2_buf;
 800078e:	4b32      	ldr	r3, [pc, #200]	@ (8000858 <usart_interrupt_commonHandler+0xec>)
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e005      	b.n	80007a0 <usart_interrupt_commonHandler+0x34>
	}else if(usart == USART6){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a31      	ldr	r2, [pc, #196]	@ (800085c <usart_interrupt_commonHandler+0xf0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d150      	bne.n	800083e <usart_interrupt_commonHandler+0xd2>
		buffer = &usart6_buf;
 800079c:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <usart_interrupt_commonHandler+0xf4>)
 800079e:	60fb      	str	r3, [r7, #12]
		return;
	}

	// Handling Transmission Interrupt

	if(usart->SR & USART_SR_TXE){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d026      	beq.n	80007fa <usart_interrupt_commonHandler+0x8e>
		if(buffer->txIndex < buffer->occupiedSize){
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d215      	bcs.n	80007e8 <usart_interrupt_commonHandler+0x7c>
			usart->DR = buffer->txBuffer[buffer->txIndex];
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	789b      	ldrb	r3, [r3, #2]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	605a      	str	r2, [r3, #4]
			buffer->txIndex++;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	709a      	strb	r2, [r3, #2]
			buffer->isReadyToTransmit = false;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e008      	b.n	80007fa <usart_interrupt_commonHandler+0x8e>
		}else{
			buffer->isReadyToTransmit = true;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
			usart->CR1 &= ~(USART_CR1_TXEIE);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60da      	str	r2, [r3, #12]
		}
	}


	// Handling Reception of data
	if(usart->SR & USART_SR_RXNE){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	2b00      	cmp	r3, #0
 8000804:	d01c      	beq.n	8000840 <usart_interrupt_commonHandler+0xd4>
		firstTimeFlag = false;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <usart_interrupt_commonHandler+0xf8>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
		buffer->rxBuffer[buffer->rxIndexTail] = usart->DR;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	440b      	add	r3, r1
 800081e:	765a      	strb	r2, [r3, #25]
		buffer->rxIndexTail = (uint8_t)((buffer->rxIndexTail + 1) % USART_BUFFERSIZE);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	3301      	adds	r3, #1
 8000828:	4a0f      	ldr	r2, [pc, #60]	@ (8000868 <usart_interrupt_commonHandler+0xfc>)
 800082a:	7812      	ldrb	r2, [r2, #0]
 800082c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000830:	fb01 f202 	mul.w	r2, r1, r2
 8000834:	1a9b      	subs	r3, r3, r2
 8000836:	b2da      	uxtb	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	711a      	strb	r2, [r3, #4]
 800083c:	e000      	b.n	8000840 <usart_interrupt_commonHandler+0xd4>
		return;
 800083e:	bf00      	nop
	}
}
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40011000 	.word	0x40011000
 8000850:	2000004c 	.word	0x2000004c
 8000854:	40004400 	.word	0x40004400
 8000858:	2000007c 	.word	0x2000007c
 800085c:	40011400 	.word	0x40011400
 8000860:	200000ac 	.word	0x200000ac
 8000864:	2000001e 	.word	0x2000001e
 8000868:	2000001d 	.word	0x2000001d

0800086c <reset_transmit_buffer>:
void reset_transmit_buffer(USART_TypeDef *usart){
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	volatile USART_BUFFER *buffer = NULL;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
	if(usart == USART1){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a11      	ldr	r2, [pc, #68]	@ (80008c0 <reset_transmit_buffer+0x54>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d102      	bne.n	8000886 <reset_transmit_buffer+0x1a>
		buffer = &usart1_buf;
 8000880:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <reset_transmit_buffer+0x58>)
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e00c      	b.n	80008a0 <reset_transmit_buffer+0x34>
	}else if(usart == USART2){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <reset_transmit_buffer+0x5c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d102      	bne.n	8000894 <reset_transmit_buffer+0x28>
		buffer = &usart2_buf;
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <reset_transmit_buffer+0x60>)
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e005      	b.n	80008a0 <reset_transmit_buffer+0x34>
	}else if(usart == USART6){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <reset_transmit_buffer+0x64>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d10b      	bne.n	80008b4 <reset_transmit_buffer+0x48>
		buffer = &usart6_buf;
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <reset_transmit_buffer+0x68>)
 800089e:	60fb      	str	r3, [r7, #12]
	}else{
		return;
	}

	buffer->txIndex = 0;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2200      	movs	r2, #0
 80008a4:	709a      	strb	r2, [r3, #2]
	buffer->isReadyToTransmit = true;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
	buffer->occupiedSize = 0;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2200      	movs	r2, #0
 80008b0:	705a      	strb	r2, [r3, #1]
 80008b2:	e000      	b.n	80008b6 <reset_transmit_buffer+0x4a>
		return;
 80008b4:	bf00      	nop
}
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40011000 	.word	0x40011000
 80008c4:	2000004c 	.word	0x2000004c
 80008c8:	40004400 	.word	0x40004400
 80008cc:	2000007c 	.word	0x2000007c
 80008d0:	40011400 	.word	0x40011400
 80008d4:	200000ac 	.word	0x200000ac

080008d8 <read_data_usart>:

volatile char* read_data_usart(USART_TypeDef *usart){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	volatile char* result = NULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
	USART_BUFFER *buffer = NULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
	if(usart==USART1){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <read_data_usart+0x68>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d107      	bne.n	8000900 <read_data_usart+0x28>
		buffer = &usart1_buf;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <read_data_usart+0x6c>)
 80008f2:	60bb      	str	r3, [r7, #8]
		result = read_data_usart_helper(buffer, usart1_recData);
 80008f4:	4914      	ldr	r1, [pc, #80]	@ (8000948 <read_data_usart+0x70>)
 80008f6:	68b8      	ldr	r0, [r7, #8]
 80008f8:	f000 f834 	bl	8000964 <read_data_usart_helper>
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	e019      	b.n	8000934 <read_data_usart+0x5c>
	}else if(usart == USART2){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <read_data_usart+0x74>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d107      	bne.n	8000918 <read_data_usart+0x40>
		buffer = &usart2_buf;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <read_data_usart+0x78>)
 800090a:	60bb      	str	r3, [r7, #8]
		result = read_data_usart_helper(buffer, usart2_recData);
 800090c:	4911      	ldr	r1, [pc, #68]	@ (8000954 <read_data_usart+0x7c>)
 800090e:	68b8      	ldr	r0, [r7, #8]
 8000910:	f000 f828 	bl	8000964 <read_data_usart_helper>
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	e00d      	b.n	8000934 <read_data_usart+0x5c>
	}else if(usart == USART6){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <read_data_usart+0x80>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d107      	bne.n	8000930 <read_data_usart+0x58>
		buffer = &usart6_buf;
 8000920:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <read_data_usart+0x84>)
 8000922:	60bb      	str	r3, [r7, #8]
		result = read_data_usart_helper(buffer, usart6_recData);
 8000924:	490e      	ldr	r1, [pc, #56]	@ (8000960 <read_data_usart+0x88>)
 8000926:	68b8      	ldr	r0, [r7, #8]
 8000928:	f000 f81c 	bl	8000964 <read_data_usart_helper>
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	e001      	b.n	8000934 <read_data_usart+0x5c>
	}else{
		return NULL;
 8000930:	2300      	movs	r3, #0
 8000932:	e000      	b.n	8000936 <read_data_usart+0x5e>
	}


	return result;
 8000934:	68fb      	ldr	r3, [r7, #12]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40011000 	.word	0x40011000
 8000944:	2000004c 	.word	0x2000004c
 8000948:	200000dc 	.word	0x200000dc
 800094c:	40004400 	.word	0x40004400
 8000950:	2000007c 	.word	0x2000007c
 8000954:	200000f4 	.word	0x200000f4
 8000958:	40011400 	.word	0x40011400
 800095c:	200000ac 	.word	0x200000ac
 8000960:	2000010c 	.word	0x2000010c

08000964 <read_data_usart_helper>:

volatile char* read_data_usart_helper(USART_BUFFER *buffer, char *data){
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	volatile uint8_t traverser = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
	if(firstTimeFlag){
 8000972:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <read_data_usart_helper+0x9c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <read_data_usart_helper+0x1a>
		return NULL; // Read this as no change in the data.
 800097a:	2300      	movs	r3, #0
 800097c:	e039      	b.n	80009f2 <read_data_usart_helper+0x8e>
	}

	// If new data came over usart then only read the data.
	if(buffer->rxIndexHead != buffer->rxIndexTail){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	78db      	ldrb	r3, [r3, #3]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	429a      	cmp	r2, r3
 800098c:	d030      	beq.n	80009f0 <read_data_usart_helper+0x8c>
		while(buffer->rxIndexHead != buffer->rxIndexTail){
 800098e:	e020      	b.n	80009d2 <read_data_usart_helper+0x6e>
			data[traverser] = buffer->rxBuffer[buffer->rxIndexHead];
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	78db      	ldrb	r3, [r3, #3]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4619      	mov	r1, r3
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	4413      	add	r3, r2
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	440a      	add	r2, r1
 80009a6:	7e52      	ldrb	r2, [r2, #25]
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	701a      	strb	r2, [r3, #0]
			buffer->rxIndexHead = (uint8_t)((buffer->rxIndexHead+1) % USART_BUFFERSIZE); //Since the buffer is a ring buffer
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	78db      	ldrb	r3, [r3, #3]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	4a13      	ldr	r2, [pc, #76]	@ (8000a04 <read_data_usart_helper+0xa0>)
 80009b6:	7812      	ldrb	r2, [r2, #0]
 80009b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80009bc:	fb01 f202 	mul.w	r2, r1, r2
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	70da      	strb	r2, [r3, #3]
			traverser++;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	3301      	adds	r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	73fb      	strb	r3, [r7, #15]
		while(buffer->rxIndexHead != buffer->rxIndexTail){
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	78db      	ldrb	r3, [r3, #3]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	429a      	cmp	r2, r3
 80009e0:	d1d6      	bne.n	8000990 <read_data_usart_helper+0x2c>
		}
		// Finally marking the end of the data....
		data[traverser] = '\0';
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	}else{

	}
	return data;
 80009f0:	683b      	ldr	r3, [r7, #0]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000001e 	.word	0x2000001e
 8000a04:	2000001d 	.word	0x2000001d

08000a08 <reset_receive_buffer>:
void reset_receive_buffer(USART_TypeDef *usart){
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	volatile USART_BUFFER *buffer = NULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
	if(usart == USART1){
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <reset_receive_buffer+0x50>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d102      	bne.n	8000a22 <reset_receive_buffer+0x1a>
		buffer = &usart1_buf;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <reset_receive_buffer+0x54>)
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e00c      	b.n	8000a3c <reset_receive_buffer+0x34>
	}else if(usart == USART2){
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <reset_receive_buffer+0x58>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d102      	bne.n	8000a30 <reset_receive_buffer+0x28>
		buffer = &usart2_buf;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <reset_receive_buffer+0x5c>)
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e005      	b.n	8000a3c <reset_receive_buffer+0x34>
	}else if(usart == USART6){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <reset_receive_buffer+0x60>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d108      	bne.n	8000a4a <reset_receive_buffer+0x42>
		buffer = &usart6_buf;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <reset_receive_buffer+0x64>)
 8000a3a:	60fb      	str	r3, [r7, #12]
	}else{
		return;
	}
	buffer->rxIndexHead = 0;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	70da      	strb	r2, [r3, #3]
	buffer->rxIndexTail = 0;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2200      	movs	r2, #0
 8000a46:	711a      	strb	r2, [r3, #4]
 8000a48:	e000      	b.n	8000a4c <reset_receive_buffer+0x44>
		return;
 8000a4a:	bf00      	nop

}
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	2000004c 	.word	0x2000004c
 8000a60:	40004400 	.word	0x40004400
 8000a64:	2000007c 	.word	0x2000007c
 8000a68:	40011400 	.word	0x40011400
 8000a6c:	200000ac 	.word	0x200000ac

08000a70 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	usart_interrupt_commonHandler(USART1);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <USART1_IRQHandler+0x10>)
 8000a76:	f7ff fe79 	bl	800076c <usart_interrupt_commonHandler>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40011000 	.word	0x40011000

08000a84 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	usart_interrupt_commonHandler(USART2);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <USART2_IRQHandler+0x10>)
 8000a8a:	f7ff fe6f 	bl	800076c <usart_interrupt_commonHandler>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40004400 	.word	0x40004400

08000a98 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	usart_interrupt_commonHandler(USART6);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <USART6_IRQHandler+0x10>)
 8000a9e:	f7ff fe65 	bl	800076c <usart_interrupt_commonHandler>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40011400 	.word	0x40011400

08000aac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aac:	480d      	ldr	r0, [pc, #52]	@ (8000ae4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	@ (8000aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <LoopForever+0xe>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	@ (8000af8 <LoopForever+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ada:	f000 f811 	bl	8000b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fc23 	bl	8000328 <main>

08000ae2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   r0, =_estack
 8000ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000af0:	08000b68 	.word	0x08000b68
  ldr r2, =_sbss
 8000af4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000af8:	20000124 	.word	0x20000124

08000afc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <__libc_init_array>:
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	4d0d      	ldr	r5, [pc, #52]	@ (8000b38 <__libc_init_array+0x38>)
 8000b04:	4c0d      	ldr	r4, [pc, #52]	@ (8000b3c <__libc_init_array+0x3c>)
 8000b06:	1b64      	subs	r4, r4, r5
 8000b08:	10a4      	asrs	r4, r4, #2
 8000b0a:	2600      	movs	r6, #0
 8000b0c:	42a6      	cmp	r6, r4
 8000b0e:	d109      	bne.n	8000b24 <__libc_init_array+0x24>
 8000b10:	4d0b      	ldr	r5, [pc, #44]	@ (8000b40 <__libc_init_array+0x40>)
 8000b12:	4c0c      	ldr	r4, [pc, #48]	@ (8000b44 <__libc_init_array+0x44>)
 8000b14:	f000 f818 	bl	8000b48 <_init>
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	10a4      	asrs	r4, r4, #2
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	42a6      	cmp	r6, r4
 8000b20:	d105      	bne.n	8000b2e <__libc_init_array+0x2e>
 8000b22:	bd70      	pop	{r4, r5, r6, pc}
 8000b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b28:	4798      	blx	r3
 8000b2a:	3601      	adds	r6, #1
 8000b2c:	e7ee      	b.n	8000b0c <__libc_init_array+0xc>
 8000b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b32:	4798      	blx	r3
 8000b34:	3601      	adds	r6, #1
 8000b36:	e7f2      	b.n	8000b1e <__libc_init_array+0x1e>
 8000b38:	08000b60 	.word	0x08000b60
 8000b3c:	08000b60 	.word	0x08000b60
 8000b40:	08000b60 	.word	0x08000b60
 8000b44:	08000b64 	.word	0x08000b64

08000b48 <_init>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	bf00      	nop
 8000b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4e:	bc08      	pop	{r3}
 8000b50:	469e      	mov	lr, r3
 8000b52:	4770      	bx	lr

08000b54 <_fini>:
 8000b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b56:	bf00      	nop
 8000b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5a:	bc08      	pop	{r3}
 8000b5c:	469e      	mov	lr, r3
 8000b5e:	4770      	bx	lr
